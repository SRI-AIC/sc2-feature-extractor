import logging
import os
import json
from absl import app, flags
from feature_extractor.bin.extract_features import _create_extractors
from feature_extractor.config import FeatureExtractorConfig
from feature_extractor.extractors import FRIENDLY_STR, ENEMY_STR, MetaExtractor, FeatureType
from feature_extractor.extractors.orders import _OrdersExtractor
from feature_extractor.extractors.factors.under_attack import UnderAttackExtractor
from feature_extractor.extractors.location.movement import FriendlyRelativeMovementExtractor
from feature_extractor.util.io import create_clear_dir, get_file_name_without_extension
from feature_extractor.util.logging import change_log_handler

__author__ = 'Pedro Sequeira'
__email__ = 'pedro.sequeira@sri.com'
__desc__ = 'Loads a feature configuration file and environment spec name and generates a json file containing' \
           'the description of the features that would be generated by running the feature extractor.' \
           'This includes the feature names, their types, and possible values (for categorical features) or ' \
           'possible ranges (for numeric features).'

ACTION_FEATURE_EXTRACTORS = (_OrdersExtractor, FriendlyRelativeMovementExtractor)

FLAGS = flags.FLAGS
flags.FLAGS['replays'].validators.clear()
flags.mark_flags_as_required(['config', 'output'])


def main(unused_argv):
    args = flags.FLAGS

    # check config
    if not os.path.exists(args.config):
        raise ValueError('Config file does not exist: {}.'.format(args.config))

    # checks output dir and files
    create_clear_dir(args.output, args.clear)
    change_log_handler(os.path.join(args.output, 'feature_descriptor.log'), args.verbosity)

    # save args
    with open(os.path.join(args.output, 'args.json'), 'w') as fp:
        json.dump({k: args[k].value for k in args}, fp, indent=4)

    # load config, save to output dir
    config = FeatureExtractorConfig.load_json(args.config)
    config.save_json(os.path.join(args.output, os.path.basename(args.config)))

    # creates feature extractors
    meta_extractor = MetaExtractor(config)
    extractors = _create_extractors(meta_extractor)

    # get the descriptors
    feat_extractors = extractors[FRIENDLY_STR] + extractors[ENEMY_STR]
    meta_feat_desc = []
    condition_feat_desc = []
    tactics_feat_desc = {}
    all_groups = set.union(*[{g_name} | set(u.name for u in units) for g_name, units in config.groups.items()])
    for feat_extractor in feat_extractors:
        feat_desc = feat_extractor.features_descriptors()
        if isinstance(feat_extractor, MetaExtractor):
            meta_feat_desc = feat_desc
        elif isinstance(feat_extractor, ACTION_FEATURE_EXTRACTORS):
            # extracts units/groups from name
            for fd in feat_desc:
                if ENEMY_STR in fd.name or fd.feature_type != FeatureType.Boolean:
                    condition_feat_desc.append(fd)  # not a friendly (Boolean) action
                    continue
                # extracts unit group name from feature label
                unit_group = None
                for g in all_groups:
                    if f'{FRIENDLY_STR}_{g}' in fd.name:
                        unit_group = g
                        break
                if unit_group is None:
                    logging.warning(f'Could not find unit group in feature: {fd.name}!')
                    continue
                if unit_group not in tactics_feat_desc:
                    tactics_feat_desc[unit_group] = []
                tactics_feat_desc[unit_group].append(fd)
        elif 'Blue' in all_groups and isinstance(feat_extractor, UnderAttackExtractor):
            # extracts friendly attacking (enemy under-attack) as tactics features
            for fd in feat_desc:
                if FRIENDLY_STR in fd.name and fd.feature_type == FeatureType.Boolean:
                    if 'Blue' not in tactics_feat_desc:
                        tactics_feat_desc['Blue'] = []
                    tactics_feat_desc['Blue'].append(fd)
                else:
                    condition_feat_desc.append(fd)  # not a friendly (Boolean) action
        else:
            condition_feat_desc.extend(feat_desc)

    # save to json
    file_path = os.path.join(args.output, get_file_name_without_extension(args.config) + '_desc.json')
    num_tactics = sum(len(tactics_feat) for _, tactics_feat in tactics_feat_desc.items())
    logging.info(f'Saving features descriptors file for {len(condition_feat_desc)} conditions and '
                 f'{num_tactics} tactics to:\n\t{file_path}')
    obj = dict(meta=meta_feat_desc, conditions=condition_feat_desc, tactics=tactics_feat_desc)
    with open(file_path, 'w') as fp:
        json.dump(obj, fp, indent=4)

    logging.info('Done!')


if __name__ == '__main__':
    app.run(main)
